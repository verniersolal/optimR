<% extend('layout') %>
<div class="row">
    <div class="col m6 l6 s12">
        <div class="row headerView center">
            <div class="col m4 l4 s12">
                <span id="itineraryTitle">Trajets</span>
                <img id="itineraryImg" src="../static/img/chemin.png" class="headerImg">
            </div>
            <div class="col m8 l8 s12">
                <form action="/optimr/itinerary" method="post">
                    <div class="input-field col l5 m12 s12">
                        <input id="departure" name="departure" type="text" class="validate">
                        <label for="departure">Départ</label>
                    </div>
                    <div class="input-field col l5 m12 s12">
                        <input id="finish" name="finish" type="text" class="validate">
                        <label for="finish">Arrivée</label>
                    </div>
                    <div class="input-field col l2 m12 s12">
                        <button class="btn waves-effect waves-light" type="submit" name="action">
                            <i class="material-icons right">search</i>
                        </button>
                    </div>
                </form>
            </div>


        </div>
        <div class="col m12 l12 s12 black">
            <div id="panel"></div>
        </div>
    </div>
    <div class="col m6 l6 s12">
        <div id="map"></div>
    </div>
    <!--<div class="formulaire" style="position:absolute; background-color:#929292;">-->
    <!--<form action='/optimr/itinerary' method='POST'>-->
    <!--<table>-->
    <!--<tr>-->
    <!--<td>Départ</td>-->
    <!--<td><input type="text" name="departure"></td>-->
    <!--</tr>-->
    <!--<tr>-->
    <!--<td>Arrivée</td>-->
    <!--<td><input type="text" name="finish"></td>-->
    <!--</tr>-->
    <!--<tr>-->
    <!--<td colspan="2"><input type="submit" value="Chercher"></td>-->
    <!--</tr>-->
    <!--</table>-->
    <!--</form>-->
    <!--</div>-->
</div>

<script type="text/javascript" charset="UTF-8">


    /**
     * Calculates and displays a car route from the Brandenburg Gate in the centre of Berlin
     * to Friedrichstraße Railway Station.
     *
     * A full list of available request parameters can be found in the Routing API documentation.
     * see:  http://developer.here.com/rest-apis/documentation/routing/topics/resource-calculate-route.html
     *
     * @param   {H.service.Platform} platform    A stub class to access HERE services
     */
        // set up containers for the map  + panel
    var mapContainer = document.getElementById('map'),
        routeInstructionsContainer = document.getElementById('panel');

    //Step 1: initialize communication with the platform
    var platform = new H.service.Platform({
        app_id: 'nrrONwSooNB8h5ESY50e',
        app_code: 'AkcUfAszo101WuKLwdMeYA',
        useHTTPS: true
    });
    var pixelRatio = window.devicePixelRatio || 1;
    var defaultLayers = platform.createDefaultLayers({
        tileSize: pixelRatio === 1 ? 256 : 512,
        ppi: pixelRatio === 1 ? undefined : 320
    });

    //Step 2: initialize a map - this map is centered over Berlin


    //Step 3: make the map interactive
    // MapEvents enables the event system
    // Behavior implements default interactions for pan/zoom (also on mobile touch environments)

    // Create the default UI components
    var bubble;
    <% if(typeof pointA !== "undefined" || typeof pointB !== "undefined"){ %>

    function calculateRouteFromAtoB(platform) {
        console.log('titi');
        var router = platform.getRoutingService(),
            routeRequestParams = {
                mode: 'fastest;car',
                representation: 'display',
                routeattributes: 'waypoints,summary,shape,legs',
                maneuverattributes: 'direction,action',
                waypoint0: '<%= pointA.Latitude %>' + ',' + '<%= pointA.Longitude %>', // Brandenburg Gate
                waypoint1: '<%= pointB.Latitude %>' + ',' + '<%= pointB.Longitude %>',// Friedrichstraße Railway Station
                language: 'fr-fr'
            };


        router.calculateRoute(
            routeRequestParams,
            onSuccess,
            onError
        );
    }

    var map = new H.Map(mapContainer,
        defaultLayers.normal.map, {
            center: {lat:<%= pointA.Latitude %>, lng:<%= pointA.Longitude %>},
            zoom: 13,
            pixelRatio: pixelRatio
        });
    calculateRouteFromAtoB(platform);

    <% }else{ %>
    mapContainer.style.width = '100%';
    var map = new H.Map(mapContainer,
        defaultLayers.normal.map, {
            center: {lat: 43.60, lng: 3.88},
            zoom: 13,
            pixelRatio: pixelRatio
        });


    // Hold a reference to any infobubble opened

    <% } %>
    var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));
    var ui = H.ui.UI.createDefault(map, defaultLayers);

    /**
     * This function will be called once the Routing REST API provides a response
     * @param  {Object} result          A JSONP object representing the calculated route
     *
     * see: http://developer.here.com/rest-apis/documentation/routing/topics/resource-type-calculate-route.html
     */
    function onSuccess(result) {

        console.log(result);
        var route = result.response.route[0];

        /*
         * The styling of the route response on the map is entirely under the developer's control.
         * A representitive styling can be found the full JS + HTML code of this example
         * in the functions below:
         */
       let test = {};
        test['trajets'] = [];
        for (var i = 0; i < result.response.route[0].leg[0].maneuver.length; i++) {
            test['trajets'].push({
                departure_time: result.response.metaInfo.timestamp,
                step: i,
                distance: result.response.route[0].leg[0].maneuver[i].length,
                duration: result.response.route[0].leg[0].maneuver[i].travelTime,
                price: tarif(result.response.route[0].leg[0].maneuver[i].instruction, result.response.route[0].leg[0].maneuver[i].length, result.response.route[0].mode.transportModes[0]),
                lgta: result.response.route[0].leg[0].maneuver[i].position.longitude,
                lata: result.response.route[0].leg[0].maneuver[i].position.latitude,
                transport_type: transp(result.response.route[0].leg[0].maneuver[i].instruction, result.response.route[0].mode.transportModes[0]),
                co2: getCo2(transp(result.response.route[0].leg[0].maneuver[i].instruction, result.response.route[0].mode.transportModes[0]), result.response.route[0].leg[0].maneuver[i].length),
                calories: getCalorie(transp(result.response.route[0].leg[0].maneuver[i].instruction, result.response.route[0].mode.transportModes[0]), result.response.route[0].leg[0].maneuver[i].length),
                no2: getNo2(transp(result.response.route[0].leg[0].maneuver[i].instruction, result.response.route[0].mode.transportModes[0]), result.response.route[0].leg[0].maneuver[i].length),
                pm10: getPm10(transp(result.response.route[0].leg[0].maneuver[i].instruction, result.response.route[0].mode.transportModes[0]), result.response.route[0].leg[0].maneuver[i].length)
            });
        }
        $.ajax({
            url: '/optimr/import',
            type: 'POST',
            data: test,
            success: function (data) {
                addRouteShapeToMap(route);
                addManueversToMap(route);

                addWaypointsToPanel(route.waypoint);
                addManueversToPanel(data);
                addSummaryToPanel(route.summary);
            },
            error: function (res, stat, err) {
                console.log(err);
            }
        });


        // ... etc.
    }

    /**
     * This function will be called if a communication error occurs during the JSON-P request
     * @param  {Object} error  The error message received.
     */
    function onError(error) {
        alert('Ooops!');
    }
    function getPm10(transport, distance){
        if(transport === 'car'){
            return 0.0138*distance;
        }else if(transport === 'bus'){
            return 0.02*distance;
        }else{
            return 0;
        }
    }
    function tarif(text, distance, transp){
        if(text.includes('>rail<') || text.includes('>bus<')){
            console.log('tram');
            return 1.6;
        } else if (transp === 'car') {
            return 0.9 * (distance / 1000);
        } else {
            return 0;
        }
    }

    function getNo2(transport, distance) {
        if (transport === 'car') {
            return 10 * distance;
        } else if (transport === 'bus') {
            return 5 * distance;
        } else {
            return 0;
        }
    }

    function getCo2(transport, distance) {
        switch (transport) {
            case 'tram':
                return 23 * (distance / 1000);
            case 'car':
                return 127 * (distance / 1000);
            case 'bus':
                return 75 * (distance / 1000);
            default:
                return 0;
        }
    }

    function getCalorie(transport, distance) {
        if (transport === 'velo') {
            return ((distance / 3600) * 36) / 16;
        } else if (transport === 'piéton') {
            return ((distance / 3600) * 29) / 6.5;
        } else {
            return 0;
        }
    }

    function transp(text, transp) {
        if (text.includes('>rail<')) {
            return 'tram';
        }else if(text.includes('>bus<')){
            return 'bus';
        } else {
            if (transp === 'car') {
                return 'car';
            } else if(transp === 'bicycle') {
                return 'velo';
            }else{
                return 'piéton';
            }
        }
    }

    /**
     * Boilerplate map initialization code starts below:
     */


    /**
     * Opens/Closes a infobubble
     * @param  {H.geo.Point} position     The location on the map.
     * @param  {String} text              The contents of the infobubble.
     */
    function openBubble(position, text) {
        if (!bubble) {
            bubble = new H.ui.InfoBubble(
                position,
                // The FO property holds the province name.
                {content: text});
            ui.addBubble(bubble);
        } else {
            bubble.setPosition(position);
            bubble.setContent(text);
            bubble.open();
        }
    }


    /**
     * Creates a H.map.Polyline from the shape of the route and adds it to the map.
     * @param {Object} route A route as received from the H.service.RoutingService
     */
    function addRouteShapeToMap(route) {
        var lineString = new H.geo.LineString(),
            routeShape = route.shape,
            polyline;

        routeShape.forEach(function (point) {
            var parts = point.split(',');
            lineString.pushLatLngAlt(parts[0], parts[1]);
        });

        polyline = new H.map.Polyline(lineString, {
            style: {
                lineWidth: 4,
                strokeColor: 'rgba(0, 128, 255, 0.7)'
            }
        });

        // Add the polyline to the map
        map.addObject(polyline);
        // And zoom to its bounding rectangle
        map.setViewBounds(polyline.getBounds(), true);
    }


    /**
     * Creates a series of H.map.Marker points from the route and adds them to the map.
     * @param {Object} route  A route as received from the H.service.RoutingService
     */
    function addManueversToMap(route) {
        var svgMarkup = '<svg width="18" height="18" ' +
            'xmlns="http://www.w3.org/2000/svg">' +
            '<circle cx="8" cy="8" r="8" ' +
            'fill="#1b468d" stroke="white" stroke-width="1"  />' +
            '</svg>',
            dotIcon = new H.map.Icon(svgMarkup, {anchor: {x: 8, y: 8}}),
            group = new H.map.Group(),
            i,
            j;

        // Add a marker for each maneuver
        for (i = 0; i < route.leg.length; i += 1) {
            for (j = 0; j < route.leg[i].maneuver.length; j += 1) {
                // Get the next maneuver.
                maneuver = route.leg[i].maneuver[j];
                // Add a marker to the maneuvers group
                var marker = new H.map.Marker({
                        lat: maneuver.position.latitude,
                        lng: maneuver.position.longitude
                    },
                );
                marker.instruction = maneuver.instruction;
                group.addObject(marker);

            }
        }

        group.addEventListener('tap', function (evt) {
            map.setCenter(evt.target.getPosition());
            openBubble(
                evt.target.getPosition(), evt.target.instruction);
        }, false);

        // Add the maneuvers group to the map
        map.addObject(group);
    }


    /**
     * Creates a series of H.map.Marker points from the route and adds them to the map.
     * @param {Object} route  A route as received from the H.service.RoutingService
     */
    function addWaypointsToPanel(waypoints) {


        var nodeH3 = document.createElement('h3'),
            waypointLabels = [],
            i;


        for (i = 0; i < waypoints.length; i += 1) {
            waypointLabels.push(waypoints[i].label)
        }

        nodeH3.textContent = waypointLabels.join(' - ');

        routeInstructionsContainer.innerHTML = '';
        routeInstructionsContainer.appendChild(nodeH3);
    }

    /**
     * Creates a series of H.map.Marker points from the route and adds them to the map.
     * @param {Object} route  A route as received from the H.service.RoutingService
     */
    function addSummaryToPanel(summary) {
        var summaryDiv = document.createElement('div'),
            content = '';
        content += '<b>Total distance</b>: ' + summary.distance + 'm. <br/>';
        content += '<b>Travel Time</b>: ' + summary.travelTime.toMMSS() + ' (in current traffic)';


        summaryDiv.style.fontSize = 'small';
        summaryDiv.style.marginLeft = '5%';
        summaryDiv.style.marginRight = '5%';
        summaryDiv.innerHTML = content;
        routeInstructionsContainer.appendChild(summaryDiv);
    }

    /**
     * Creates a series of H.map.Marker points from the route and adds them to the map.
     * @param {Object} route  A route as received from the H.service.RoutingService
     */
    function addManueversToPanel(route) {
        var nodeOL = document.createElement('ul');

        nodeOL.style.fontSize = 'small';
        nodeOL.style.marginLeft = '5%';
        nodeOL.style.marginRight = '5%';
        nodeOL.className = 'directions';
        var score = document.createElement('span');
        var sum = 0;
        // Add a marker for each maneuver
        for (var i = 0; i < route.length; i++) {

            sum += route[i].score;
            var listep = document.createElement('li');
            var spanStep = document.createElement('span');
            spanStep.innerHTML = 'Point ' + i + ' Co2 :' +
                route[i].co2.toFixed(3)+ ' no2: ' + route[i].no2+ ' pm10: '+ route[i].pm10 + ' calories '+ route[i].calories + ' price: ' + route[i].price.toFixed(2) +' Score : ' + route[i].score

            listep.appendChild(spanStep);
            nodeOL.appendChild(listep);
            var form = document.createElement('form'),
                select = document.createElement('select');
            var transp = ['car', 'velo', 'piéton', 'bus', 'tram'];
            for (var j = 0; j < transp.length; j++) {
                var option = document.createElement('option');
                option.innerHTML = transp[j];
                select.id = 'select'+i;
                select.className = 'input-field col s12';
                select.appendChild(option)
                form.appendChild(select);

                $('#select' + j).on('click', function (d) {
                })

            }
            nodeOL.appendChild(form);

        }
        score.innerHTML = 'Score total du trajet : ' + sum;
        routeInstructionsContainer.appendChild(nodeOL);
        routeInstructionsContainer.appendChild(score);
        setSelected(route);


    }

    function setSelected(route) {
        var transp = ['voiture', 'velo', 'piéton', 'bus', 'tram'];

        for (var i = 0; i < route.length; i++) {
            $('#select' + i).val(route[i].transport_type);
            $('#select' + i).on('click', function (d) {
                var id = this.id.match(/\d+/)[0];
                $.ajax({
                    url: '/optimr/getData',
                    type: 'GET',
                    success: function (data) {
                        data = data[id];
                        var transp = '';
                        if(d.target.value === 'piéton'){
                            transp  = 'pedestrian';
                        }else if(d.target.value === 'tram' || d.target.value === 'bus'){
                            transp  = 'publicTransport';
                        }else if(d.target.value === 'car'){
                            transp = 'car';

                        }
                        else{
                            transp = 'bicycle'
                        }
                        console.log(transp);
                        var router = platform.getRoutingService(),
                            routeRequestParams = {
                                mode: 'fastest;'+transp,
                                representation: 'display',
                                routeattributes: 'waypoints,summary,shape,legs',
                                maneuverattributes: 'direction,action',
                                waypoint0: data.lata.toString() + ',' + data.lgta.toString(), // Brandenburg Gate
                                waypoint1: data.latb.toString() + ',' + data.lgtb.toString(),// Friedrichstraße Railway Station
                                language: 'fr-fr'
                            };


                        router.calculateRoute(
                            routeRequestParams,
                            onSuccess,
                            onError
                        );


                    },
                    error: function (res, stat, err) {
                        console.log(err);
                    }
                });
            })
        }// you need to specify id of combo to set right combo, if more than one combo

    }


    Number.prototype.toMMSS = function () {
        return Math.floor(this / 60) + ' minutes ' + (this % 60) + ' seconds.';
    }
</script>
</html>